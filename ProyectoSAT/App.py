
"""
Integrantes:
â€¢ Gustavo Adolfo Cruz Bardales - 22779
â€¢ Javier AndrÃ©s Chen GonzÃ¡lez - 22153
â€¢ JosuÃ© Emanuel Say Garcia - 22801
â€¢ Pedro Pablo GuzmÃ¡n MayÃ©n - 22111
â€¢ Mathew Alexander Cordero Aquino - 22982
â€¢ SebastiÃ¡n Estrada Tuch - 21405

"""

import streamlit as st
from Parser import parseToString
from Algoritm_set import Ejecute_Algoritm
# Configura la pÃ¡gina de la aplicaciÃ³n con un tÃ­tulo y un Ã­cono
st.set_page_config(page_title="Evaluador lÃ³gico", page_icon="ðŸ§ ")
st.title('Evaluador de Expresiones LÃ³gicas')


if 'expression_input' not in st.session_state:
    st.session_state.expression_input = ''


operators = {'âˆ¨': ' âˆ¨ ', 'âˆ§': ' âˆ§ ', 'Â¬': 'Â¬'}


col1, col2, col3 = st.columns([1, 1, 1])
with col1:
    if st.button('âˆ¨'):
        st.session_state.expression_input += operators['âˆ¨']
with col2:
    if st.button('âˆ§'):
        st.session_state.expression_input += operators['âˆ§']
with col3:
    if st.button('Â¬'):
        st.session_state.expression_input += operators['Â¬']


predefined_expressions = [
    'p âˆ§ Â¬p', 
    'q âˆ¨ p âˆ¨ Â¬p', 
    '(Â¬p âˆ¨ Â¬r âˆ¨ Â¬s) âˆ§ (Â¬q âˆ¨ Â¬p âˆ¨ Â¬s)', 
    '(Â¬p âˆ¨ Â¬q) âˆ§ (q âˆ¨ Â¬s) âˆ§ (Â¬p âˆ¨ s) âˆ§ (Â¬q âˆ¨ s)',
    '(Â¬p âˆ¨ Â¬q âˆ¨ Â¬r) âˆ§ (q âˆ¨ Â¬r âˆ¨ p) âˆ§ (Â¬p âˆ¨ q âˆ¨ r)',
    'r âˆ§ (Â¬q âˆ¨ Â¬r) âˆ§ (Â¬p âˆ¨ q âˆ¨ Â¬r) âˆ§ q'
]


col1, col2 = st.columns([3,2])
with col1:
    selected_expression = st.selectbox('Usar una expresiÃ³n del documento', [''] + predefined_expressions)
with col2:
    expression_input = st.text_input('Ingresa la expresiÃ³n manualmente', st.session_state.expression_input)


st.session_state.expression_input = expression_input


expression = expression_input if expression_input else selected_expression


algoritmo = st.selectbox('Selecciona el Algoritmo', ['Fuerza Bruta', 'DPL'])


if st.button('Evaluar'):
    if expression:
        result, asignacion = Ejecute_Algoritm(expression, algoritmo)
        if result:
            st.success('La expresiÃ³n es satisfacible ðŸ˜ƒ')
            if algoritmo == 'Fuerza Bruta':
                st.write('AsignaciÃ³n:', parseToString(asignacion))
            elif algoritmo == 'DPL':
                st.write('AsignaciÃ³n:', asignacion)
        else:
            st.error('La expresiÃ³n no es satisfacible ðŸ˜ž')
    else:
        st.warning('Por favor ingresa una expresiÃ³n lÃ³gica vÃ¡lida.')


if 'result' in locals():
    if result:
        st.markdown("### Â¡La expresiÃ³n es **satisfacible**!")
        st.image("https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwebstockreview.net%2Fimages%2Fclipart-smile-smile-gif-2.gif&f=1&nofb=1&ipt=294231fe86a240d4509d6ae34b13cff3bc32cee00995943d15638eb2239d3d8f&ipo=images", width=200)
    else:
        st.markdown("### La expresiÃ³n **no** es satisfacible.")
        st.image("https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmedia.tenor.com%2Fimages%2Ffc1d577e8b42f847e1ef1615b76a9483%2Ftenor.gif&f=1&nofb=1&ipt=46395077f203095ad2f2bb4fd4e8d16027782772c5832057cba83ad55ee6155e&ipo=images", width=200)
