import streamlit as st
from Parser import infix_to_Postfix, Parser, fuerzaBruta, parseToNumber, parseToString

# ConfiguraciÃ³n de la pÃ¡gina
st.set_page_config(page_title="Evaluador lÃ³gico", page_icon="ðŸ§ ")
st.title('Evaluador de Expresiones LÃ³gicas')

operators = {'âˆ¨': ' âˆ¨ ', 'âˆ§': ' âˆ§ ', 'Â¬': 'Â¬'}

col1, col2, col3 = st.columns([1, 1, 1])
with col1:
    if st.button('âˆ¨'):
        st.session_state.expression += operators['âˆ¨']
with col2:
    if st.button('âˆ§'):
        st.session_state.expression += operators['âˆ§']
with col3:
    if st.button('Â¬'):
        st.session_state.expression += operators['Â¬']

expression = st.text_input('Ingresa la expresiÃ³n lÃ³gica', '(p âˆ¨ q) âˆ§ (q âˆ¨ s)', key='expression')

if st.button('Evaluar'):
    if expression:
        postfix_expr = infix_to_Postfix(expression)
        parsed_expr = Parser(postfix_expr)

        result, asignacion = fuerzaBruta(parseToNumber(parsed_expr))

        if result:
            st.success('La expresiÃ³n es satisfacible ðŸ˜ƒ')
            st.write('AsignaciÃ³n:', parseToString(asignacion))
        else:
            st.error('La expresiÃ³n no es satisfacible ðŸ˜ž')
    else:
        st.warning('Por favor ingresa una expresiÃ³n lÃ³gica vÃ¡lida.')

# VisualizaciÃ³n adicional con emojis
if 'result' in locals():
    if result:
        st.markdown("### Â¡La expresiÃ³n es **satisfacible**!")
        st.image("https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fwebstockreview.net%2Fimages%2Fclipart-smile-smile-gif-2.gif&f=1&nofb=1&ipt=294231fe86a240d4509d6ae34b13cff3bc32cee00995943d15638eb2239d3d8f&ipo=images", width=200)
    else:
        st.markdown("### La expresiÃ³n **no** es satisfacible.")
        st.image("https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fmedia.tenor.com%2Fimages%2Ffc1d577e8b42f847e1ef1615b76a9483%2Ftenor.gif&f=1&nofb=1&ipt=46395077f203095ad2f2bb4fd4e8d16027782772c5832057cba83ad55ee6155e&ipo=images", width=200)

